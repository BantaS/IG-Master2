---
title: Introduction à Spring et Hibernate
subtitle: Institut Galilée - Master 2 EDI² et PLS
author: Jones Magloire
date: 03 Décembre 2018
theme: material
toc: true
header-includes:
  - \newcommand{\hideFromPandoc}[1]{#1}
  - \usepackage{fourier}
  - \hideFromPandoc{ \let\Begin\begin \let\End\end }
  - \hideFromPandoc{ \let\CardB\begin \let\CardE\end }
  # - \useDarkTheme
  - \usePrimaryBlueGrey \useAccentBlue
  # - '\usePrimary{4527A0}{311B92}{FFFFFF}'
  # - '\useAccent{C6FF00}{000000}'
build: pandoc -st beamer presentation.beamer -o presentation.pdf
---

# Qu'est-ce que JEE ?

---

## Qu'est-ce que JEE ?

\Begin{cardTiny}{}

- Version actuelle Jakarta EE 8
- Ensemble de Java Specification Requests ou JSR
  - JTA (Java Transaction API)
  - JDBC (Java DataBase Connection)
  - JPA (Java Persistence API)
  - Servlet
  - JSP (JavaServer PAges)
  - EJB (Enterprise Java Bean)
- Cédé à Eclipse Foundation en septembre 2017

\End{cardTiny}

----

## Qu'est-ce que JEE ?

\Begin{cardTiny}

- Plusieurs type de serveur
  - Serveur d'application (Glassfish, WildFly...)
  - Conteneur de servlets (Tomcat, Jetty, WebSphere...)

\End{cardTiny}

\Begin{cardTiny}

- Implémentation des spécifications
  - Spring Framwork et ses modules
    - Spring JDBC (implémente JDBC)
    - Spring ORM (binding hibernate et JPA)
    - Spring Web et WebMVC (implémentent servlet)
  - Hibernate ORM (JPA)

\End{cardTiny}

# Pourquoi Hibernate ?

----

## Que fait Hibernate ?

\begin{card}[Object-Relational Mapping (ORM)]

\begin{itemize}
\item Classe Java $\Leftrightarrow$ Table SQL (Entity)
\item Transactions (JTA)
\item Création des tables au démarage
\item Lazy loading
\item Gestion des sessions à la DB
\item Cache
\end{itemize}

\end{card}

## Avantages et Inconvéniants

\begin{card}[Avantages]

\begin{itemize}
\item<1-> Mapping des classes automatique
\item<1-> Rapidité d'implémentation
\item<1-> Génère les requêtes SQL
\item<1-> Changement facile de SGBD
\end{itemize}

\end{card}

\begin{card}[Inconvéniants]

\begin{itemize}
\item<2-> Requêtes complexes pas toujours optimisées
\item<2-> \danger Les relations One/Many To Many en mode lazzy
\end{itemize}

\end{card}

# Pourquoi Spring ?

----

## Que fait Spring ?

\begin{card}[L'inversion de contrôle (IOC)]

\begin{itemize}
\item Résolution des dépendances pour la création des beans (Singleton/Prototype)
\item Injection des dépendances
\end{itemize}

\end{card}

\begin{card}[Programmation orientée aspect (AOP)]

\begin{itemize}
\item Transactions
\item Exception handler
\item Intercepteurs (ex: securité)
\end{itemize}

\end{card}

# Qu'est-ce que ~~Maven~~ Gradle ?

----

## Qu'est-ce que ~~Maven~~ Gradle ?

\Begin{card}

- Gestionnaire de build et de dépendances évolué
- Utilisation du multi-module
- Lancement des tests
- Plugins en tout genre
- Sans installation grâce au wrapper
- Moins verbeux que Maven (Goovy vs XML)

\End{card}

# Reactive APIs?

----

## Spring 5 reactive API

\Begin{cardTiny}

- Modèle classique:
  - 1 requête = 1 thread
  - 10 requêtes = 10 threads
  - 100 requêtes = 100 threads
  -  Mais combien d’opérations peuvent réellement être exécutées en même temps?

- Modèle réactif:
  - Des requêtes, des "workers"
  - Optimiser l’activité du thread plutôt que le nombre de threads

\End{cardTiny}

# Et pour après ?

----

## Autres frameworks ?

\begin{card}[Alternatives à JEE]

\begin{itemize}
\item Vert.x (framework événementiel par la fondation Eclipse)
\item Netty (framework non-blocking I/O par Netty Project Community)
\item Spring Framework et Spring Boot
\item Ktor (framwork asynchrone designé pour Kotlin)
\end{itemize}

\end{card}

## Stage takima

\Begin{cardTiny}

- 2 mois de formation
    - 1 semaine en piscine (JEE stack)
    - Projet incrémental
        - Java 11 (Stream API, Lambdas…), Spring, Spring-MVC, Spring-Security, Hibernate ORM, Spring Data JPA, JDBC Template, JPA, Criteria, QueryDSL, Jax-WS, Jax-RS, Jackson, Selenium, Junit, Mockito, Docker, Jenkins, Gatling, Angular.js
        - 1 semaine DevOPS
        - 1 jour sur la performance + tunning
    - Conférences techniques (JVM, Spring, ORMs)
    - Formations annexes: Git, React.js, Android, Gatling, Agilité
    - Certifications Oracle Certified Java Programmer Associate & Professional
- 4 mois sur un projet interne

\End{cardTiny}

## Stage takima

\Begin{cardTiny}

- Séminaires (Vendredi, Samedi, Dimanche)
- Hackathons
- Tech nights
- 1 Conf offerte / an (Devoxx, Droidcon, Paris Container Day...)
- 1 Billard en interne
- 1 Nintendo Switch

\End{cardTiny}
